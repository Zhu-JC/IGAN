}
use = which(data1[,5]>0)
data1[use,3] = data1[use,3]/data1[use,5]
data1[use,4] = data1[use,4]/data1[use,5]
r = cor(data1[use,3],data1[use,4],method = 'spearman')
colnames(data1) = c('x', 'y', 'color', 'neighbor')
grey = which(data1[,5] == 0)
data_gray <- data1[grey,]
data_gradient <- data1[use,]
G1 = ggplot() +
geom_point(data = data_gray, aes(x = x, y = y), color = "gray") +
geom_point(data = data_gradient, aes(x = x, y = y, color = color)) +
scale_color_gradient(low = "lightpink", high = "darkred") +
theme_minimal() +
labs(title = paste0(useGene,' expression'), x = "X", y = "Y") +
theme(text = element_text(size = 20),
plot.title = element_text(size = 22),
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18))
#G1 = ggplot(data1) +
#geom_point(aes(x = x, y = y, color = color), data = data1[grey,]) +
#geom_point(aes(x = x, y = y, color = color), data = data1[use,]) +
#scale_color_gradient(low = "lightpink", high = "darkred", guide = 'none') +
#scale_color_manual(values = 'gray', guide = 'none', aesthetics = 'color') +
#theme_minimal() +
#labs(title = paste0(useGene,' expression'), x = "X", y = "Y")+
#theme(text = element_text(size = 20),  # 调整全局文本大小
#plot.title = element_text(size = 22), # 调整标题大小
#axis.title.x = element_text(size = 18), # 调整X轴标题大小
#axis.title.y = element_text(size = 18)) # 调整Y轴标题大小
#guides(color = guide_legend(title = "Intensity"))
colnames(data2) = c('x', 'y', 'color')
use2 = which(data2[,4]>0)
data2[use2,3] = data2[use2,3]/data2[use2,4]
grey = which(data2[,4] == 0)
data_gray <- data2[grey,]
data_gradient <- data2[use2,]
G2 = ggplot() +
geom_point(data = data_gray, aes(x = x, y = y), color = "gray") +
geom_point(data = data_gradient, aes(x = x, y = y, color = color)) +
scale_color_gradient(low = "lightpink", high = "darkred") +
theme_minimal() +
labs(title = paste0(useGene,' target genes expression'), x = "X", y = "Y") +
theme(text = element_text(size = 20),
plot.title = element_text(size = 22),
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18))
#G2 = ggplot(data2, aes(x, y, color = color)) +
#geom_point() +
#labs(title = paste0(useGene,' target genes expression'), x = "X", y = "Y")+
#theme(text = element_text(size = 20),  # 调整全局文本大小
#plot.title = element_text(size = 22), # 调整标题大小
#axis.title.x = element_text(size = 18), # 调整X轴标题大小
#axis.title.y = element_text(size = 18)) # 调整Y轴标题大小
r = round(r,2)
grid.arrange(G1, G2, ncol = 2, top = textGrob(paste0('correlation = ',r), gp = gpar(fontsize = 20)))
plot_ligand_target = function(result, spatial, cells_group, gene, match_list1, genename){
useGene = genename
ngroup = length(cells_group)
data1 <- data.frame(x = spatial[,1],
y = spatial[,2])
data1[,3:5] = 0
data2 <- data.frame(x = spatial[,1],
y = spatial[,2])
data2[,3:4] = 0
use_gene = match(useGene, gene[match_list1])
for (j in 1:ngroup) {
#print(i)
sub_result = result[[j]][[use_gene]]
if(is.null(sub_result[[1]])){
next
}
target = as.integer(row.names(sub_result))
for (v in 1:nrow(sub_result)) {
k = which(sub_result[v,]>0)
k = as.integer(colnames(sub_result)[k])
sender = as.integer(cells_group[[j]][2,k])
receiver = as.integer(cells_group[[j]][3,k])
data1[sender,3] = data1[sender,3] + t(M[match(useGene,gene),sender])
data1[sender,4] = data1[sender,4] + t(M[match_list2[target[v]],receiver])
data1[sender,5] = data1[sender,5] + 1
data2[receiver,3] = data2[receiver,3] + t(M[match_list2[target[v]],receiver])
data2[receiver,4] = data2[receiver,4] + 1
}
}
use = which(data1[,5]>0)
data1[use,3] = data1[use,3]/data1[use,5]
data1[use,4] = data1[use,4]/data1[use,5]
r = cor(data1[use,3],data1[use,4],method = 'spearman')
colnames(data1) = c('x', 'y', 'color', 'neighbor')
grey = which(data1[,5] == 0)
data_gray <- data1[grey,]
data_gradient <- data1[use,]
G1 = ggplot() +
geom_point(data = data_gray, aes(x = x, y = y), color = "gray") +
geom_point(data = data_gradient, aes(x = x, y = y, color = color)) +
scale_color_gradient(low = "lightpink", high = "darkred") +
theme_minimal() +
labs(title = paste0(useGene,' expression'), x = "X", y = "Y") +
theme(text = element_text(size = 20),
plot.title = element_text(size = 22),
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18))
#G1 = ggplot(data1) +
#geom_point(aes(x = x, y = y, color = color), data = data1[grey,]) +
#geom_point(aes(x = x, y = y, color = color), data = data1[use,]) +
#scale_color_gradient(low = "lightpink", high = "darkred", guide = 'none') +
#scale_color_manual(values = 'gray', guide = 'none', aesthetics = 'color') +
#theme_minimal() +
#labs(title = paste0(useGene,' expression'), x = "X", y = "Y")+
#theme(text = element_text(size = 20),  # 调整全局文本大小
#plot.title = element_text(size = 22), # 调整标题大小
#axis.title.x = element_text(size = 18), # 调整X轴标题大小
#axis.title.y = element_text(size = 18)) # 调整Y轴标题大小
#guides(color = guide_legend(title = "Intensity"))
colnames(data2) = c('x', 'y', 'color')
use2 = which(data2[,4]>0)
data2[use2,3] = data2[use2,3]/data2[use2,4]
grey = which(data2[,4] == 0)
data_gray <- data2[grey,]
data_gradient <- data2[use2,]
G2 = ggplot() +
geom_point(data = data_gray, aes(x = x, y = y), color = "gray") +
geom_point(data = data_gradient, aes(x = x, y = y, color = color)) +
scale_color_gradient(low = "lightpink", high = "darkred") +
theme_minimal() +
labs(title = paste0(useGene,' target genes expression'), x = "X", y = "Y") +
theme(text = element_text(size = 20),
plot.title = element_text(size = 22),
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18))
#G2 = ggplot(data2, aes(x, y, color = color)) +
#geom_point() +
#labs(title = paste0(useGene,' target genes expression'), x = "X", y = "Y")+
#theme(text = element_text(size = 20),  # 调整全局文本大小
#plot.title = element_text(size = 22), # 调整标题大小
#axis.title.x = element_text(size = 18), # 调整X轴标题大小
#axis.title.y = element_text(size = 18)) # 调整Y轴标题大小
r = round(r,2)
G1
G2
grid.arrange(G1, G2, ncol = 2, top = textGrob(paste0('correlation = ',r), gp = gpar(fontsize = 20)))
}
plot_ligand_target(result, spatial, cells_group,match_list1, gene, 'C3')
plot_ligand_target = function(result, spatial, cells_group, gene, match_list1, genename){
useGene = genename
ngroup = length(cells_group)
data1 <- data.frame(x = spatial[,1],
y = spatial[,2])
data1[,3:5] = 0
data2 <- data.frame(x = spatial[,1],
y = spatial[,2])
data2[,3:4] = 0
use_gene = match(useGene, gene[match_list1])
for (j in 1:ngroup) {
#print(i)
sub_result = result[[j]][[use_gene]]
if(is.null(sub_result[[1]])){
next
}
target = as.integer(row.names(sub_result))
for (v in 1:nrow(sub_result)) {
k = which(sub_result[v,]>0)
k = as.integer(colnames(sub_result)[k])
sender = as.integer(cells_group[[j]][2,k])
receiver = as.integer(cells_group[[j]][3,k])
data1[sender,3] = data1[sender,3] + t(M[match(useGene,gene),sender])
data1[sender,4] = data1[sender,4] + t(M[match_list2[target[v]],receiver])
data1[sender,5] = data1[sender,5] + 1
data2[receiver,3] = data2[receiver,3] + t(M[match_list2[target[v]],receiver])
data2[receiver,4] = data2[receiver,4] + 1
}
}
use = which(data1[,5]>0)
data1[use,3] = data1[use,3]/data1[use,5]
data1[use,4] = data1[use,4]/data1[use,5]
r = cor(data1[use,3],data1[use,4],method = 'spearman')
colnames(data1) = c('x', 'y', 'color', 'neighbor')
grey = which(data1[,5] == 0)
data_gray <- data1[grey,]
data_gradient <- data1[use,]
G1 = ggplot() +
geom_point(data = data_gray, aes(x = x, y = y), color = "gray") +
geom_point(data = data_gradient, aes(x = x, y = y, color = color)) +
scale_color_gradient(low = "lightpink", high = "darkred") +
theme_minimal() +
labs(title = paste0(useGene,' expression'), x = "X", y = "Y") +
theme(text = element_text(size = 20),
plot.title = element_text(size = 22),
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18))
#G1 = ggplot(data1) +
#geom_point(aes(x = x, y = y, color = color), data = data1[grey,]) +
#geom_point(aes(x = x, y = y, color = color), data = data1[use,]) +
#scale_color_gradient(low = "lightpink", high = "darkred", guide = 'none') +
#scale_color_manual(values = 'gray', guide = 'none', aesthetics = 'color') +
#theme_minimal() +
#labs(title = paste0(useGene,' expression'), x = "X", y = "Y")+
#theme(text = element_text(size = 20),  # 调整全局文本大小
#plot.title = element_text(size = 22), # 调整标题大小
#axis.title.x = element_text(size = 18), # 调整X轴标题大小
#axis.title.y = element_text(size = 18)) # 调整Y轴标题大小
#guides(color = guide_legend(title = "Intensity"))
colnames(data2) = c('x', 'y', 'color')
use2 = which(data2[,4]>0)
data2[use2,3] = data2[use2,3]/data2[use2,4]
grey = which(data2[,4] == 0)
data_gray <- data2[grey,]
data_gradient <- data2[use2,]
G2 = ggplot() +
geom_point(data = data_gray, aes(x = x, y = y), color = "gray") +
geom_point(data = data_gradient, aes(x = x, y = y, color = color)) +
scale_color_gradient(low = "lightpink", high = "darkred") +
theme_minimal() +
labs(title = paste0(useGene,' target genes expression'), x = "X", y = "Y") +
theme(text = element_text(size = 20),
plot.title = element_text(size = 22),
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18))
#G2 = ggplot(data2, aes(x, y, color = color)) +
#geom_point() +
#labs(title = paste0(useGene,' target genes expression'), x = "X", y = "Y")+
#theme(text = element_text(size = 20),  # 调整全局文本大小
#plot.title = element_text(size = 22), # 调整标题大小
#axis.title.x = element_text(size = 18), # 调整X轴标题大小
#axis.title.y = element_text(size = 18)) # 调整Y轴标题大小
r = round(r,2)
print(grid.arrange(G1, G2, ncol = 2, top = textGrob(paste0('correlation = ',r), gp = gpar(fontsize = 20))))
}
plot_ligand_target(result, spatial, cells_group,match_list1, gene, 'C3')
plot_ligand_target = function(result, spatial, cells_group, gene, match_list1, genename){
useGene = genename
ngroup = length(cells_group)
data1 <- data.frame(x = spatial[,1],
y = spatial[,2])
data1[,3:5] = 0
data2 <- data.frame(x = spatial[,1],
y = spatial[,2])
data2[,3:4] = 0
use_gene = match(useGene, gene[match_list1])
for (j in 1:ngroup) {
#print(i)
sub_result = result[[j]][[use_gene]]
if(is.null(sub_result[[1]])){
next
}
target = as.integer(row.names(sub_result))
for (v in 1:nrow(sub_result)) {
k = which(sub_result[v,]>0)
k = as.integer(colnames(sub_result)[k])
sender = as.integer(cells_group[[j]][2,k])
receiver = as.integer(cells_group[[j]][3,k])
data1[sender,3] = data1[sender,3] + t(M[match(useGene,gene),sender])
data1[sender,4] = data1[sender,4] + t(M[match_list2[target[v]],receiver])
data1[sender,5] = data1[sender,5] + 1
data2[receiver,3] = data2[receiver,3] + t(M[match_list2[target[v]],receiver])
data2[receiver,4] = data2[receiver,4] + 1
}
}
use = which(data1[,5]>0)
data1[use,3] = data1[use,3]/data1[use,5]
data1[use,4] = data1[use,4]/data1[use,5]
r = cor(data1[use,3],data1[use,4],method = 'spearman')
colnames(data1) = c('x', 'y', 'color', 'neighbor')
grey = which(data1[,5] == 0)
data_gray <- data1[grey,]
data_gradient <- data1[use,]
G1 = ggplot() +
geom_point(data = data_gray, aes(x = x, y = y), color = "gray") +
geom_point(data = data_gradient, aes(x = x, y = y, color = color)) +
scale_color_gradient(low = "lightpink", high = "darkred") +
theme_minimal() +
labs(title = paste0(useGene,' expression'), x = "X", y = "Y") +
theme(text = element_text(size = 20),
plot.title = element_text(size = 22),
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18))
#G1 = ggplot(data1) +
#geom_point(aes(x = x, y = y, color = color), data = data1[grey,]) +
#geom_point(aes(x = x, y = y, color = color), data = data1[use,]) +
#scale_color_gradient(low = "lightpink", high = "darkred", guide = 'none') +
#scale_color_manual(values = 'gray', guide = 'none', aesthetics = 'color') +
#theme_minimal() +
#labs(title = paste0(useGene,' expression'), x = "X", y = "Y")+
#theme(text = element_text(size = 20),  # 调整全局文本大小
#plot.title = element_text(size = 22), # 调整标题大小
#axis.title.x = element_text(size = 18), # 调整X轴标题大小
#axis.title.y = element_text(size = 18)) # 调整Y轴标题大小
#guides(color = guide_legend(title = "Intensity"))
colnames(data2) = c('x', 'y', 'color')
use2 = which(data2[,4]>0)
data2[use2,3] = data2[use2,3]/data2[use2,4]
grey = which(data2[,4] == 0)
data_gray <- data2[grey,]
data_gradient <- data2[use2,]
G2 = ggplot() +
geom_point(data = data_gray, aes(x = x, y = y), color = "gray") +
geom_point(data = data_gradient, aes(x = x, y = y, color = color)) +
scale_color_gradient(low = "lightpink", high = "darkred") +
theme_minimal() +
labs(title = paste0(useGene,' target genes expression'), x = "X", y = "Y") +
theme(text = element_text(size = 20),
plot.title = element_text(size = 22),
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18))
#G2 = ggplot(data2, aes(x, y, color = color)) +
#geom_point() +
#labs(title = paste0(useGene,' target genes expression'), x = "X", y = "Y")+
#theme(text = element_text(size = 20),  # 调整全局文本大小
#plot.title = element_text(size = 22), # 调整标题大小
#axis.title.x = element_text(size = 18), # 调整X轴标题大小
#axis.title.y = element_text(size = 18)) # 调整Y轴标题大小
r = round(r,2)
print(grid.arrange(G1, G2, ncol = 2, top = textGrob(paste0('correlation = ',r), gp = gpar(fontsize = 20))))
return(G1)
}
plot_ligand_target(result, spatial, cells_group,match_list1, gene, 'C3')
View(G1)
G1
G11 = plot_ligand_target(result, spatial, cells_group,match_list1, gene, 'C3')
G11
View(G11)
plot_ligand_target = function(result, spatial, cells_group, gene, match_list1, match_list2, genename){
useGene = genename
ngroup = length(cells_group)
data1 <- data.frame(x = spatial[,1],
y = spatial[,2])
data1[,3:5] = 0
data2 <- data.frame(x = spatial[,1],
y = spatial[,2])
data2[,3:4] = 0
use_gene = match(useGene, gene[match_list1])
for (j in 1:ngroup) {
#print(i)
sub_result = result[[j]][[use_gene]]
if(is.null(sub_result[[1]])){
next
}
target = as.integer(row.names(sub_result))
for (v in 1:nrow(sub_result)) {
k = which(sub_result[v,]>0)
k = as.integer(colnames(sub_result)[k])
sender = as.integer(cells_group[[j]][2,k])
receiver = as.integer(cells_group[[j]][3,k])
data1[sender,3] = data1[sender,3] + t(M[match(useGene,gene),sender])
data1[sender,4] = data1[sender,4] + t(M[match_list2[target[v]],receiver])
data1[sender,5] = data1[sender,5] + 1
data2[receiver,3] = data2[receiver,3] + t(M[match_list2[target[v]],receiver])
data2[receiver,4] = data2[receiver,4] + 1
}
}
use = which(data1[,5]>0)
data1[use,3] = data1[use,3]/data1[use,5]
data1[use,4] = data1[use,4]/data1[use,5]
r = cor(data1[use,3],data1[use,4],method = 'spearman')
colnames(data1) = c('x', 'y', 'color', 'neighbor')
grey = which(data1[,5] == 0)
data_gray <- data1[grey,]
data_gradient <- data1[use,]
G1 = ggplot() +
geom_point(data = data_gray, aes(x = x, y = y), color = "gray") +
geom_point(data = data_gradient, aes(x = x, y = y, color = color)) +
scale_color_gradient(low = "lightpink", high = "darkred") +
theme_minimal() +
labs(title = paste0(useGene,' expression'), x = "X", y = "Y") +
theme(text = element_text(size = 20),
plot.title = element_text(size = 22),
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18))
#G1 = ggplot(data1) +
#geom_point(aes(x = x, y = y, color = color), data = data1[grey,]) +
#geom_point(aes(x = x, y = y, color = color), data = data1[use,]) +
#scale_color_gradient(low = "lightpink", high = "darkred", guide = 'none') +
#scale_color_manual(values = 'gray', guide = 'none', aesthetics = 'color') +
#theme_minimal() +
#labs(title = paste0(useGene,' expression'), x = "X", y = "Y")+
#theme(text = element_text(size = 20),  # 调整全局文本大小
#plot.title = element_text(size = 22), # 调整标题大小
#axis.title.x = element_text(size = 18), # 调整X轴标题大小
#axis.title.y = element_text(size = 18)) # 调整Y轴标题大小
#guides(color = guide_legend(title = "Intensity"))
colnames(data2) = c('x', 'y', 'color')
use2 = which(data2[,4]>0)
data2[use2,3] = data2[use2,3]/data2[use2,4]
grey = which(data2[,4] == 0)
data_gray <- data2[grey,]
data_gradient <- data2[use2,]
G2 = ggplot() +
geom_point(data = data_gray, aes(x = x, y = y), color = "gray") +
geom_point(data = data_gradient, aes(x = x, y = y, color = color)) +
scale_color_gradient(low = "lightpink", high = "darkred") +
theme_minimal() +
labs(title = paste0(useGene,' target genes expression'), x = "X", y = "Y") +
theme(text = element_text(size = 20),
plot.title = element_text(size = 22),
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18))
#G2 = ggplot(data2, aes(x, y, color = color)) +
#geom_point() +
#labs(title = paste0(useGene,' target genes expression'), x = "X", y = "Y")+
#theme(text = element_text(size = 20),  # 调整全局文本大小
#plot.title = element_text(size = 22), # 调整标题大小
#axis.title.x = element_text(size = 18), # 调整X轴标题大小
#axis.title.y = element_text(size = 18)) # 调整Y轴标题大小
r = round(r,2)
graph = grid.arrange(G1, G2, ncol = 2, top = textGrob(paste0('correlation = ',r), gp = gpar(fontsize = 20)))
return(graph)
}
plot_ligand_target(result, spatial, cells_group,match_list1, gene, 'C3')
plot_ligand_target(result, spatial, cells_group,gene, match_list1, match_list2, 'C3')
library(IGAN2)
Code + insert Roxygen skeleton
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
rm(plot_ligand_target)
library(IGAN2)
plot_ligand_target(result, spatial, cells_group, gene, match_list1, match_list2, 'C3')
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
remove.packages("IGAN")
remove.packages("IGAN2")
devtools::install_github('Zhu-JC/IGAN')
library(IGAN)
library(clusterProfiler)
library(org.Hs.eg.db)
library(org.Mm.eg.db)
library(ggplot2)
library(ggsankey)
library(networkD3)
library(KEGGREST)
library(tidyverse)
library(plotly)
library(magick)
library(CellChat)
library(patchwork)
library(NMF)
library(ggalluvial)
library(ComplexHeatmap)
library(gridExtra)
load('C:/Users/17249/Desktop/IGAN/mypkg/data/tumor.Rdata')
gene = read.csv('C:/Users/17249/Desktop/tumor/genes.csv',row.names = 1)[,1]
gene2 = toupper(gene)
gene_list1 = toupper(gene_list1[,1])
gene_list2 = toupper(gene_list2[,1])
match_list1 = na.omit(match(gene_list1, gene2))
match_list2 = na.omit(match(gene_list2, gene2))
plot_ligand_target(result, spatial, cells_group, gene, match_list1, match_list2, Plg)
library(IGAN)
plot_ligand_target(result, spatial, cells_group, gene, match_list1, match_list2, Plg)
library(IGAN)
plot_ligand_target(result, spatial, cells_group, gene, match_list1, match_list2, Plg)
a = plot_Genecor('SPP1', result, cells_group, spatial, match_list1, gene)
a + scale_color_distiller(palette = "Set1")
remove.packages("IGAN")
devtools::install_github('Zhu-JC/IGAN')
devtools::install_github('Zhu-JC/IGAN')
library(IGAN)
library(clusterProfiler)
library(org.Hs.eg.db)
library(org.Mm.eg.db)
library(ggplot2)
library(ggsankey)
library(networkD3)
library(KEGGREST)
library(tidyverse)
library(plotly)
library(magick)
library(CellChat)
library(patchwork)
library(NMF)
library(ggalluvial)
library(ComplexHeatmap)
library(gridExtra)
load('C:/Users/17249/Desktop/IGAN/mypkg/data/tumor.Rdata')
gene = read.csv('C:/Users/17249/Desktop/tumor/genes.csv',row.names = 1)[,1]
gene2 = toupper(gene)
gene_list1 = toupper(gene_list1[,1])
gene_list2 = toupper(gene_list2[,1])
match_list1 = na.omit(match(gene_list1, gene2))
match_list2 = na.omit(match(gene_list2, gene2))
plot_ligand_target(result, spatial, cells_group, gene, match_list1, match_list2, Plg)
library(IGAN)
library(IGAN)
plot_ligand_target(result, spatial, cells_group, gene, match_list1, match_list2, Plg)
IGAN::plot_ligand_target(result, spatial, cells_group, gene, match_list1, match_list2, 'Plg')
celltype = as.data.frame(c('CAF','HSC','Kupffer','LSEC','T','hepatocyte 1','hepatocyte 2','hepatocyte 3','interferon response','monocyte_DC','vascular smooth mc','tumor I','tumor II'))
cells_group = cells_to_group(spatial, ident, group_size, celltype)
plot_ligand_target(
result,
spatial,
cells_group,
gene,
match_list1,
match_list2,
genename
)
a= plot_ligand_target(result, spatial, cells_group, gene, match_list1, match_list2, 'Plg')
par(mfrow = c(1,1), xpd=TRUE)
plot_cellchat('SPP1',result,cells_group,gene,match_list1,ident)
a= plot_ligand_target(result, spatial, cells_group, gene, match_list1, match_list2, 'Plg')
